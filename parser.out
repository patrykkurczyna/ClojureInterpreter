Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> input
Rule 1     input -> expr_list
Rule 2     expr_list -> expr_list expression
Rule 3     expr_list -> expression
Rule 4     expression -> ( ID expr_list )
Rule 5     expression -> ( defn ID list expr_list )
Rule 6     expression -> ( loop expression expr_list )
Rule 7     expression -> atom
Rule 8     atom -> INTEGER
Rule 9     atom -> FLOAT
Rule 10    atom -> STRING
Rule 11    atom -> BRACKET expr_list )
Rule 12    atom -> idname
Rule 13    idname -> ID
Rule 14    list -> ( )
Rule 15    list -> ( expr_list . expression )
Rule 16    list -> ( expr_list )

Terminals, with rules where they appear

(                    : 4 5 6 14 15 16
)                    : 4 5 6 11 14 15 16
.                    : 15
BRACKET              : 11
FLOAT                : 9
ID                   : 4 5 13
INTEGER              : 8
STRING               : 10
defn                 : 5
error                : 
loop                 : 6

Nonterminals, with rules where they appear

atom                 : 7
expr_list            : 1 2 4 5 6 11 15 16
expression           : 2 3 6 15
idname               : 12
input                : 0
list                 : 5

Parsing method: LALR

state 0

    (0) S' -> . input
    (1) input -> . expr_list
    (2) expr_list -> . expr_list expression
    (3) expr_list -> . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    expr_list                      shift and go to state 7
    idname                         shift and go to state 3
    atom                           shift and go to state 5
    input                          shift and go to state 8
    expression                     shift and go to state 10

state 1

    (9) atom -> FLOAT .

    .               reduce using rule 9 (atom -> FLOAT .)
    )               reduce using rule 9 (atom -> FLOAT .)
    (               reduce using rule 9 (atom -> FLOAT .)
    INTEGER         reduce using rule 9 (atom -> FLOAT .)
    FLOAT           reduce using rule 9 (atom -> FLOAT .)
    STRING          reduce using rule 9 (atom -> FLOAT .)
    BRACKET         reduce using rule 9 (atom -> FLOAT .)
    ID              reduce using rule 9 (atom -> FLOAT .)
    $end            reduce using rule 9 (atom -> FLOAT .)


state 2

    (10) atom -> STRING .

    .               reduce using rule 10 (atom -> STRING .)
    )               reduce using rule 10 (atom -> STRING .)
    (               reduce using rule 10 (atom -> STRING .)
    INTEGER         reduce using rule 10 (atom -> STRING .)
    FLOAT           reduce using rule 10 (atom -> STRING .)
    STRING          reduce using rule 10 (atom -> STRING .)
    BRACKET         reduce using rule 10 (atom -> STRING .)
    ID              reduce using rule 10 (atom -> STRING .)
    $end            reduce using rule 10 (atom -> STRING .)


state 3

    (12) atom -> idname .

    .               reduce using rule 12 (atom -> idname .)
    )               reduce using rule 12 (atom -> idname .)
    (               reduce using rule 12 (atom -> idname .)
    INTEGER         reduce using rule 12 (atom -> idname .)
    FLOAT           reduce using rule 12 (atom -> idname .)
    STRING          reduce using rule 12 (atom -> idname .)
    BRACKET         reduce using rule 12 (atom -> idname .)
    ID              reduce using rule 12 (atom -> idname .)
    $end            reduce using rule 12 (atom -> idname .)


state 4

    (4) expression -> ( . ID expr_list )
    (5) expression -> ( . defn ID list expr_list )
    (6) expression -> ( . loop expression expr_list )

    ID              shift and go to state 12
    defn            shift and go to state 13
    loop            shift and go to state 14


state 5

    (7) expression -> atom .

    )               reduce using rule 7 (expression -> atom .)
    (               reduce using rule 7 (expression -> atom .)
    INTEGER         reduce using rule 7 (expression -> atom .)
    FLOAT           reduce using rule 7 (expression -> atom .)
    STRING          reduce using rule 7 (expression -> atom .)
    BRACKET         reduce using rule 7 (expression -> atom .)
    ID              reduce using rule 7 (expression -> atom .)
    $end            reduce using rule 7 (expression -> atom .)
    .               reduce using rule 7 (expression -> atom .)


state 6

    (11) atom -> BRACKET . expr_list )
    (2) expr_list -> . expr_list expression
    (3) expr_list -> . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    expr_list                      shift and go to state 15
    idname                         shift and go to state 3
    expression                     shift and go to state 10
    atom                           shift and go to state 5

state 7

    (1) input -> expr_list .
    (2) expr_list -> expr_list . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    $end            reduce using rule 1 (input -> expr_list .)
    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    idname                         shift and go to state 3
    expression                     shift and go to state 16
    atom                           shift and go to state 5

state 8

    (0) S' -> input .



state 9

    (8) atom -> INTEGER .

    .               reduce using rule 8 (atom -> INTEGER .)
    )               reduce using rule 8 (atom -> INTEGER .)
    (               reduce using rule 8 (atom -> INTEGER .)
    INTEGER         reduce using rule 8 (atom -> INTEGER .)
    FLOAT           reduce using rule 8 (atom -> INTEGER .)
    STRING          reduce using rule 8 (atom -> INTEGER .)
    BRACKET         reduce using rule 8 (atom -> INTEGER .)
    ID              reduce using rule 8 (atom -> INTEGER .)
    $end            reduce using rule 8 (atom -> INTEGER .)


state 10

    (3) expr_list -> expression .

    )               reduce using rule 3 (expr_list -> expression .)
    (               reduce using rule 3 (expr_list -> expression .)
    INTEGER         reduce using rule 3 (expr_list -> expression .)
    FLOAT           reduce using rule 3 (expr_list -> expression .)
    STRING          reduce using rule 3 (expr_list -> expression .)
    BRACKET         reduce using rule 3 (expr_list -> expression .)
    ID              reduce using rule 3 (expr_list -> expression .)
    .               reduce using rule 3 (expr_list -> expression .)
    $end            reduce using rule 3 (expr_list -> expression .)


state 11

    (13) idname -> ID .

    )               reduce using rule 13 (idname -> ID .)
    (               reduce using rule 13 (idname -> ID .)
    INTEGER         reduce using rule 13 (idname -> ID .)
    FLOAT           reduce using rule 13 (idname -> ID .)
    STRING          reduce using rule 13 (idname -> ID .)
    BRACKET         reduce using rule 13 (idname -> ID .)
    ID              reduce using rule 13 (idname -> ID .)
    $end            reduce using rule 13 (idname -> ID .)
    .               reduce using rule 13 (idname -> ID .)


state 12

    (4) expression -> ( ID . expr_list )
    (2) expr_list -> . expr_list expression
    (3) expr_list -> . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    expr_list                      shift and go to state 17
    idname                         shift and go to state 3
    expression                     shift and go to state 10
    atom                           shift and go to state 5

state 13

    (5) expression -> ( defn . ID list expr_list )

    ID              shift and go to state 18


state 14

    (6) expression -> ( loop . expression expr_list )
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    idname                         shift and go to state 3
    expression                     shift and go to state 19
    atom                           shift and go to state 5

state 15

    (11) atom -> BRACKET expr_list . )
    (2) expr_list -> expr_list . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    )               shift and go to state 20
    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    idname                         shift and go to state 3
    expression                     shift and go to state 16
    atom                           shift and go to state 5

state 16

    (2) expr_list -> expr_list expression .

    )               reduce using rule 2 (expr_list -> expr_list expression .)
    (               reduce using rule 2 (expr_list -> expr_list expression .)
    INTEGER         reduce using rule 2 (expr_list -> expr_list expression .)
    FLOAT           reduce using rule 2 (expr_list -> expr_list expression .)
    STRING          reduce using rule 2 (expr_list -> expr_list expression .)
    BRACKET         reduce using rule 2 (expr_list -> expr_list expression .)
    ID              reduce using rule 2 (expr_list -> expr_list expression .)
    .               reduce using rule 2 (expr_list -> expr_list expression .)
    $end            reduce using rule 2 (expr_list -> expr_list expression .)


state 17

    (4) expression -> ( ID expr_list . )
    (2) expr_list -> expr_list . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    )               shift and go to state 21
    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    idname                         shift and go to state 3
    expression                     shift and go to state 16
    atom                           shift and go to state 5

state 18

    (5) expression -> ( defn ID . list expr_list )
    (14) list -> . ( )
    (15) list -> . ( expr_list . expression )
    (16) list -> . ( expr_list )

    (               shift and go to state 23

    list                           shift and go to state 22

state 19

    (6) expression -> ( loop expression . expr_list )
    (2) expr_list -> . expr_list expression
    (3) expr_list -> . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    expr_list                      shift and go to state 24
    idname                         shift and go to state 3
    expression                     shift and go to state 10
    atom                           shift and go to state 5

state 20

    (11) atom -> BRACKET expr_list ) .

    .               reduce using rule 11 (atom -> BRACKET expr_list ) .)
    )               reduce using rule 11 (atom -> BRACKET expr_list ) .)
    (               reduce using rule 11 (atom -> BRACKET expr_list ) .)
    INTEGER         reduce using rule 11 (atom -> BRACKET expr_list ) .)
    FLOAT           reduce using rule 11 (atom -> BRACKET expr_list ) .)
    STRING          reduce using rule 11 (atom -> BRACKET expr_list ) .)
    BRACKET         reduce using rule 11 (atom -> BRACKET expr_list ) .)
    ID              reduce using rule 11 (atom -> BRACKET expr_list ) .)
    $end            reduce using rule 11 (atom -> BRACKET expr_list ) .)


state 21

    (4) expression -> ( ID expr_list ) .

    )               reduce using rule 4 (expression -> ( ID expr_list ) .)
    (               reduce using rule 4 (expression -> ( ID expr_list ) .)
    INTEGER         reduce using rule 4 (expression -> ( ID expr_list ) .)
    FLOAT           reduce using rule 4 (expression -> ( ID expr_list ) .)
    STRING          reduce using rule 4 (expression -> ( ID expr_list ) .)
    BRACKET         reduce using rule 4 (expression -> ( ID expr_list ) .)
    ID              reduce using rule 4 (expression -> ( ID expr_list ) .)
    $end            reduce using rule 4 (expression -> ( ID expr_list ) .)
    .               reduce using rule 4 (expression -> ( ID expr_list ) .)


state 22

    (5) expression -> ( defn ID list . expr_list )
    (2) expr_list -> . expr_list expression
    (3) expr_list -> . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    expr_list                      shift and go to state 25
    idname                         shift and go to state 3
    expression                     shift and go to state 10
    atom                           shift and go to state 5

state 23

    (14) list -> ( . )
    (15) list -> ( . expr_list . expression )
    (16) list -> ( . expr_list )
    (2) expr_list -> . expr_list expression
    (3) expr_list -> . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    )               shift and go to state 26
    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    expr_list                      shift and go to state 27
    idname                         shift and go to state 3
    expression                     shift and go to state 10
    atom                           shift and go to state 5

state 24

    (6) expression -> ( loop expression expr_list . )
    (2) expr_list -> expr_list . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    )               shift and go to state 28
    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    idname                         shift and go to state 3
    expression                     shift and go to state 16
    atom                           shift and go to state 5

state 25

    (5) expression -> ( defn ID list expr_list . )
    (2) expr_list -> expr_list . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    )               shift and go to state 29
    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    idname                         shift and go to state 3
    expression                     shift and go to state 16
    atom                           shift and go to state 5

state 26

    (14) list -> ( ) .

    (               reduce using rule 14 (list -> ( ) .)
    INTEGER         reduce using rule 14 (list -> ( ) .)
    FLOAT           reduce using rule 14 (list -> ( ) .)
    STRING          reduce using rule 14 (list -> ( ) .)
    BRACKET         reduce using rule 14 (list -> ( ) .)
    ID              reduce using rule 14 (list -> ( ) .)


state 27

    (15) list -> ( expr_list . . expression )
    (16) list -> ( expr_list . )
    (2) expr_list -> expr_list . expression
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    .               shift and go to state 31
    )               shift and go to state 30
    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    idname                         shift and go to state 3
    expression                     shift and go to state 16
    atom                           shift and go to state 5

state 28

    (6) expression -> ( loop expression expr_list ) .

    )               reduce using rule 6 (expression -> ( loop expression expr_list ) .)
    (               reduce using rule 6 (expression -> ( loop expression expr_list ) .)
    INTEGER         reduce using rule 6 (expression -> ( loop expression expr_list ) .)
    FLOAT           reduce using rule 6 (expression -> ( loop expression expr_list ) .)
    STRING          reduce using rule 6 (expression -> ( loop expression expr_list ) .)
    BRACKET         reduce using rule 6 (expression -> ( loop expression expr_list ) .)
    ID              reduce using rule 6 (expression -> ( loop expression expr_list ) .)
    $end            reduce using rule 6 (expression -> ( loop expression expr_list ) .)
    .               reduce using rule 6 (expression -> ( loop expression expr_list ) .)


state 29

    (5) expression -> ( defn ID list expr_list ) .

    )               reduce using rule 5 (expression -> ( defn ID list expr_list ) .)
    (               reduce using rule 5 (expression -> ( defn ID list expr_list ) .)
    INTEGER         reduce using rule 5 (expression -> ( defn ID list expr_list ) .)
    FLOAT           reduce using rule 5 (expression -> ( defn ID list expr_list ) .)
    STRING          reduce using rule 5 (expression -> ( defn ID list expr_list ) .)
    BRACKET         reduce using rule 5 (expression -> ( defn ID list expr_list ) .)
    ID              reduce using rule 5 (expression -> ( defn ID list expr_list ) .)
    $end            reduce using rule 5 (expression -> ( defn ID list expr_list ) .)
    .               reduce using rule 5 (expression -> ( defn ID list expr_list ) .)


state 30

    (16) list -> ( expr_list ) .

    (               reduce using rule 16 (list -> ( expr_list ) .)
    INTEGER         reduce using rule 16 (list -> ( expr_list ) .)
    FLOAT           reduce using rule 16 (list -> ( expr_list ) .)
    STRING          reduce using rule 16 (list -> ( expr_list ) .)
    BRACKET         reduce using rule 16 (list -> ( expr_list ) .)
    ID              reduce using rule 16 (list -> ( expr_list ) .)


state 31

    (15) list -> ( expr_list . . expression )
    (4) expression -> . ( ID expr_list )
    (5) expression -> . ( defn ID list expr_list )
    (6) expression -> . ( loop expression expr_list )
    (7) expression -> . atom
    (8) atom -> . INTEGER
    (9) atom -> . FLOAT
    (10) atom -> . STRING
    (11) atom -> . BRACKET expr_list )
    (12) atom -> . idname
    (13) idname -> . ID

    (               shift and go to state 4
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 2
    BRACKET         shift and go to state 6
    ID              shift and go to state 11

    idname                         shift and go to state 3
    expression                     shift and go to state 32
    atom                           shift and go to state 5

state 32

    (15) list -> ( expr_list . expression . )

    )               shift and go to state 33


state 33

    (15) list -> ( expr_list . expression ) .

    (               reduce using rule 15 (list -> ( expr_list . expression ) .)
    INTEGER         reduce using rule 15 (list -> ( expr_list . expression ) .)
    FLOAT           reduce using rule 15 (list -> ( expr_list . expression ) .)
    STRING          reduce using rule 15 (list -> ( expr_list . expression ) .)
    BRACKET         reduce using rule 15 (list -> ( expr_list . expression ) .)
    ID              reduce using rule 15 (list -> ( expr_list . expression ) .)

