
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '+\xc5;g\xb9\xf5\xf2\x18\xf5\xc9\xc6\xfa#g3{'
    
_lr_action_items = {'STRING':([0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,],[2,-9,-10,-13,-7,2,2,2,-8,-3,-14,2,2,2,2,-2,2,2,-11,-12,-4,2,2,2,2,2,-15,-6,-5,-16,]),')':([1,2,3,5,10,11,12,16,18,19,22,23,24,27,28,31,32,],[-9,-10,-13,-7,-8,-3,-14,22,-2,24,-11,-12,-4,31,32,-6,-5,]),'(':([0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,],[4,-9,-10,-13,-7,4,4,4,-8,-3,-14,4,4,4,4,-2,4,4,-11,-12,-4,4,4,4,4,4,-15,-6,-5,-16,]),'FLOAT':([0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,],[1,-9,-10,-13,-7,1,1,1,-8,-3,-14,1,1,1,1,-2,1,1,-11,-12,-4,1,1,1,1,1,-15,-6,-5,-16,]),'defn':([4,],[14,]),'BRACKET':([0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,],[6,-9,-10,-13,-7,6,6,6,-8,-3,-14,6,6,6,6,-2,6,6,-11,-12,-4,6,6,6,6,6,-15,-6,-5,-16,]),'SQBRACKET':([0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,],[7,-9,-10,-13,-7,7,7,7,-8,-3,-14,7,7,7,7,-2,7,7,-11,-12,-4,7,7,7,7,7,-15,-6,-5,-16,]),'INTEGER':([0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,],[10,-9,-10,-13,-7,10,10,10,-8,-3,-14,10,10,10,10,-2,10,10,-11,-12,-4,10,10,10,10,10,-15,-6,-5,-16,]),'[':([20,],[26,]),']':([1,2,3,5,10,11,12,17,18,22,23,24,26,29,31,32,],[-9,-10,-13,-7,-8,-3,-14,23,-2,-11,-12,-4,30,33,-6,-5,]),'ID':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,],[12,-9,-10,-13,13,-7,12,12,12,-8,-3,-14,12,20,12,12,12,-2,12,12,-11,-12,-4,12,12,12,12,12,-15,-6,-5,-16,]),'loop':([4,],[15,]),'$end':([1,2,3,5,8,9,10,11,12,18,22,23,24,31,32,],[-9,-10,-13,-7,-1,0,-8,-3,-14,-2,-11,-12,-4,-6,-5,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr_list':([0,6,7,13,21,25,26,],[8,16,17,19,27,28,29,]),'idname':([0,6,7,8,13,15,16,17,19,21,25,26,27,28,29,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'vector':([20,],[25,]),'atom':([0,6,7,8,13,15,16,17,19,21,25,26,27,28,29,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'input':([0,],[9,]),'expression':([0,6,7,8,13,15,16,17,19,21,25,26,27,28,29,],[11,11,11,18,11,21,18,18,18,11,11,11,18,18,18,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> input","S'",1,None,None,None),
  ('input -> expr_list','input',1,'p_input','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',25),
  ('expr_list -> expr_list expression','expr_list',2,'p_expr_list','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',29),
  ('expr_list -> expression','expr_list',1,'p_expr_list','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',30),
  ('expression -> ( ID expr_list )','expression',4,'p_expression','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',38),
  ('expression -> ( defn ID vector expr_list )','expression',6,'p_expression','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',39),
  ('expression -> ( loop expression expr_list )','expression',5,'p_expression','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',40),
  ('expression -> atom','expression',1,'p_expression','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',41),
  ('atom -> INTEGER','atom',1,'p_atom','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',53),
  ('atom -> FLOAT','atom',1,'p_atom','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',54),
  ('atom -> STRING','atom',1,'p_atom','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',55),
  ('atom -> BRACKET expr_list )','atom',3,'p_atom','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',56),
  ('atom -> SQBRACKET expr_list ]','atom',3,'p_atom','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',57),
  ('atom -> idname','atom',1,'p_atom','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',58),
  ('idname -> ID','idname',1,'p_idname','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',67),
  ('vector -> [ ]','vector',2,'p_vector','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',72),
  ('vector -> [ expr_list ]','vector',3,'p_vector','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',73),
  ('list -> ( )','list',2,'p_list','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',85),
  ('list -> ( expr_list )','list',3,'p_list','c:\\DropBox\\Workspaces\\GitHub\\ClojureInterpreter\\LISPparser.py',86),
]
